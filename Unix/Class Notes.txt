CSC 2510: INTRO TO DEVOPS WITH UNIX NOTES

8/22/2022: DevOps: An Introduction

What is DevOps?

 - a set of practices that automates the processes between software development and IT teams, in order that they can build, test, and release software faster and more reliably
 - intended to reduce the time committing a change to a system and the change being placed into normal production, while ensuring high quality

 - Combination of developer and operation roles: developers hold responsibility for how their code behaves in op-environemnts
 - Pipeline from code commit to code deploy: starts when code is committed. Goes through testing, building, and deployment. Continues with bug/feature development
 - Automated and repeatable: not a manual process. Consistent and reliable. Repeatable by any developer

Why DevOps?
 - XebiaLab Survey: businesses discussed that the process needed improvement, too much inconsistency across apps/environments, too many errors, unreliable deployment process
 - CA Tech Survey: DevOps imrpoved many processes w/i businesses (less time to market, increased frequency of deployment, improved quality, etc.)
 - Reduce errors, catch bugs, reproducible deployment. Release failures cost time, money, customers, and company reputation
 - Automation means scaling: Resource allocation can be scaled to demand; wasted servers are wasted resources
 - Releases can be more frequent; up to thousands of releases per day

How to DevOps?
 - Automate everything: integration, deployment, provisioning, configuration, etc.
Source Code Management:
- Git (GitHub, GitLab, Bitbucket), Others (SVN, TVFC)
 - Utilize branch/merge strategy, commit early and often, pre-req to effective DevOps

Continuous Integration: process for automating code integration
 - Handles: Merging, Building, Testing
Tools: CI Specific (Jenkins, Travis CI, Semaphore, GitHub, GitLab), Build Tools (anything that compiles), DB Tools
Continuous Deployment:
Role: Infrascturcture Provisioning/Configuration, Deployment
Tools: All the CI Tools, Artifact Management (Archiva, Docker)
Deployment: Capistrano, Harness
Orchestration: Kubernetes, OpenShift

Additional Roles of DevOps:

Canaries: deploy to a small number of servers first
Rollbacks: How to decomission an update
Microservices: Small, stateless portions of the system, usually with one job; connected through a larger system

DevOps Concerns:
Security: what happens when you lose data? (DevSecOps)
Getting Started: Infrastructure to support tooling, getting customers on board with the product



8/24/2022: Unix
Kernels: Lowwest level of an OS
 - Interfaces between applications and hardware
Main functions: Memory management, netwoek management
Controls and mediates access to hardware
 - Implements and suports fundamental abstractions (Processes, Files, devices)
 - Schedules/allocates resources (Memory, CPU)
Unix: a multi-user, multi-tasking OS kernel
Linux: 
Preeemtive multitaksing
virtual memory (paging)
Shared libraries, Dmeand loading
Dynamic level modules
Shared copy-on-write executables
TCP/IP networking
SMP support
Open source

Unix File Systems:
Hierarchical file system from the ROOT folder
Permissions: r (read) w (write) x (execute)
Owner (of a file), Group, Others



09/07/2022:
Redireciotn/outputting/piping
pipe: takes the output of a comand into another command



09/12/2022: More Unix

Why Unix?
68% of servers use Linux
Unix bridges the gap between most systems (Linux, MacOS, BSD, Solaris)

What is a Script?
 - Script: a file that stores a series of commands that is run in Linux
 - only can be run in the CLI; typically ends with the extension .sh
 - Allows reuse of common command sequences easily
 - Supports input and output; can have control structures, Typically "short" (single file)
Basic Scripting
at the beginning of each script: #!/bin/bash for bash-based shells
 - Comments being with #
 - Must use chmod u+x <script.sh> to execute the rights to the file
 - Ran using ./<script.sh>

Control Structures:



09/26/2022: BASH N' STUFF

Case Statements:
case $<variable>  in
	case (can use pipes for multiple responses))
		stuff
		;;
	case (can use [] for ranges))
		more stuff
		;;
	*)
		catchall stuff n' things
		;;
esac

Functions:

function <name> {}

Arrays:

<array_name>[((iterator++))]=$line (for reading into a line)
echo{<array_name>[]}



10/12/2022: Regular Expressions

Regular Expression: defines a set of one or more strings of characters
 - a complex regex uses letters, numbers, and special characters to define many different strings of characters
 - a regualr expression is said to match any string it defines
A word character is a letter, a number, or an underscore
 - ^: focres a match at the beginning of a line of the preceding character
 - $: forces a match at the end of a line of the preceding character
 - \b: forces a match at the beginning or end of a word of the preceding character

Multipliers:
. - matches a single character of the preceding character
* - matches zero or more occurences of the preceding character
(ex) + - Matches one or more occurences of the preceding character 
(ex) ? - Matches zero or one time of the preceding character
{n} - match exactly n times of the preceding character
{n,m} - matches between n and m times of the preceding character
{n,} Match at least n times of the preceding character

Brackets: defines a character class that will amtch any single character w/i the brackets
 - Can define a range of characters ( [a-z], [A-Z], [0-9], [a-zA-Z])
 - ^ inside a bracket is a negation ([^a-z])

Grouping and OR

Parenthesis () - creates a grouping, which can be used to apply a rule to a group of characters
A single pipe | is the OR operator
 - can be used with or without a grouping

Shorthand Character Classes
 - \s [[:space:]] - matches anything that is considered whitespace
 - \S [^[:space]] - matches anything that is not considered whitespace



10/24/2022: Version Control

What is Version Control?

Tools that help manage verious version of files
 - Tracks changes (what, who, when, why)
Frequently used for code management (referred to as Source Code Management (SCM))

Why SCM?
 - Reverting versions, compare earlier implementations, redundancy

What is Git?
Centralized SCM:
 - singular point of truth; one priamry copy of the entire repository
Distributed SCM:
 - every repository has a full repo that is cloned into the remote repo
 - can commit changes, push/pull, remote work, etc.

How Does Git Work?
 - Keeps track only of files that have changed via snapshots (commits)
 - Git stores the full state of te project, sotring a stream of snapshots
 - Files that aren't changed are just linked to the commit 
 - Almost all operations are locally based
 - checksums identify commits to the repository using hashes
 - difficult to delete history once it has been committed

Tracked files: things git knows about and keeps track of
Untracked files: things git does not know about and won't track

Main Sections:
Working Directoty - "modified"
Staging Area - "staged"
Local Repository - "commit"
Remote Repository

Methods:
add - adds files
commit - stages files
push - pushes to remote repository
pull - pulls any updates from the repository
fetch - also pulls updates from local repository and merges them into your local directory



10/26/2022: Git Branching

Branches:
 -divergent development paths
 - Often used to develop work simutaneously
 - Frequently joined together via merges
 - Represented using an acyclic directed graph

Branching: a recommended sets of branches
Requires a particular workflow (based on project, team, development requirements)
New commits are added to the currently checked out branch
 - branches are typically short-lived (merged into primary branches and pruned)
 - crucial for large taeams/projects

Merging a Branch:
 - integrating one branch into another
 - Typically includes: Pull/merge requests code review, handling merge conflicts
creating a branch creates one locally

























































